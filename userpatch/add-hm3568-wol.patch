diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c
index 4ea31ccf24d0..1a8131de26c6 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c
@@ -1874,6 +1874,12 @@ static int rk_gmac_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static int rk_gmac_shutdown(struct platform_device *pdev)
+{
+	stmmac_shutdown(&pdev->dev);
+}
+
+
 #ifdef CONFIG_PM_SLEEP
 static int rk_gmac_suspend(struct device *dev)
 {
@@ -1926,6 +1932,7 @@ MODULE_DEVICE_TABLE(of, rk_gmac_dwmac_match);
 static struct platform_driver rk_gmac_dwmac_driver = {
 	.probe  = rk_gmac_probe,
 	.remove = rk_gmac_remove,
+	.shutdown= rk_gmac_shutdown,
 	.driver = {
 		.name           = "rk_gmac-dwmac",
 		.pm		= &rk_gmac_pm_ops,
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac.h b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
index 07ea5ab0a60b..fc7f94a5e564 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
@@ -352,6 +352,7 @@ int stmmac_xdp_open(struct net_device *dev);
 void stmmac_xdp_release(struct net_device *dev);
 int stmmac_resume(struct device *dev);
 int stmmac_suspend(struct device *dev);
+int stmmac_shutdown(struct device *dev);
 void stmmac_dvr_remove(struct device *dev);
 int stmmac_dvr_probe(struct device *device,
 		     struct plat_stmmacenet_data *plat_dat,
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 0ffbc9fb3f06..92bf024fe5d8 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -7464,6 +7464,71 @@ void stmmac_dvr_remove(struct device *dev)
 }
 EXPORT_SYMBOL_GPL(stmmac_dvr_remove);
 
+/**
+ * stmmac_shutdown 
+ * @dev: device pointer
+ * user: add
+ * Description: wol mac address
+ * program the PMT register (for WoL), clean and release driver resources.
+ */
+
+int stmmac_shutdown(struct device *dev)
+{
+	int value;
+#if 1
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	printk("stmmac_shutdown\n");
+
+	if(!netif_running(ndev))
+		return 0;
+	
+	if(priv->dev->dev_addr)
+	{
+		printk("stmmac_shutdown set MAC: %x, %x, %x, %x, %x, %x",
+				priv->dev->dev_addr[0],
+				priv->dev->dev_addr[1],
+				priv->dev->dev_addr[2],
+				priv->dev->dev_addr[3],
+				priv->dev->dev_addr[4],
+				priv->dev->dev_addr[5]);
+
+		//set PMEB mode
+		phy_write(priv->dev->phydev, 0x1f, 0x0d40);
+		value = phy_read(priv->dev->phydev, 0x16);
+		phy_write(priv->dev->phydev, 0x16,value | BIT(5));
+		
+		//set mac addr
+		//0a:ce:a9:3b:29:dd
+		//ce0a, 3ba9, dd29,
+		//set mac addr
+		phy_write(priv->dev->phydev, 0x1f, 0x0d8c);
+		phy_write(priv->dev->phydev, 0x10, ((u16)priv->dev->dev_addr[1] << 8) + priv->dev->dev_addr[0]);
+		phy_write(priv->dev->phydev, 0x11, ((u16)priv->dev->dev_addr[3] << 8) + priv->dev->dev_addr[2]);
+		phy_write(priv->dev->phydev, 0x12, ((u16)priv->dev->dev_addr[5] << 8) + priv->dev->dev_addr[4]);
+
+		//Set Max packet length
+		phy_write(priv->dev->phydev, 0x1f, 0x0d8a);
+		phy_write(priv->dev->phydev, 0x11, 0x9fff);
+
+		//Enable WOL Magic Packet Event
+		phy_write(priv->dev->phydev, 0x1f, 0x0d8a);
+		phy_write(priv->dev->phydev, 0x10, 0x1000);
+
+		//disable rgmii pad
+		//Page 0x0d8a Reg19 bit[15]= 1 
+		phy_write(priv->dev->phydev, 0x1f, 0x0d8a);
+		value = phy_read(priv->dev->phydev, 0x13);
+		phy_write(priv->dev->phydev, 0x13, value | BIT(15));	
+		return 0;
+	}
+#endif
+	return 0;
+
+}
+EXPORT_SYMBOL_GPL(stmmac_shutdown);
+
+
 /**
  * stmmac_suspend - suspend callback
  * @dev: device pointer
